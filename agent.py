import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
import numpy as np
import pandas as pd

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning = True, epsilon = 1, alpha = 0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions
      
        #self.ag_state = Agent.get_state(self)
        
        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()
        #actiondict = {ya:0 for ya in self.valid_actions}
        #i=0
        #for j in ('green','red'):
        #    for k in (True, False):
        #        for l in (True, False):
        #            #for l2 in (True, False):
        #                #for m in (0,1):
        #                for n in ('forward', 'left', 'right'):
        #                    q = (n,j,k,l)
        #                    i=i+1
        #                    self.statedict[q] = 'State {}'.format(i)
        #self.Q = {xa:actiondict for xa in self.statedict.values()}      
        # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.trial = 0
        print self.Q.keys()
    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """
        trial = self.trial
        trial = trial + 1
        self.trial = trial
        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        if testing==True:
            self.epsilon = 0
            self.alpha = 0
        if testing==False:
            if self.learning == True:
                if trial > 1: 
                    if self.epsilon > 0:
                        self.epsilon = np.exp(-0.01*trial)
                        #self.epsilon = self.epsilon - 0.05
                    else:
                        self.epsilon = 0;
                    if self.alpha > 0.2:
                        self.alpha = self.alpha #- 0.1*self.alpha
                    else:
                        self.alpha = self.alpha
        return 

    def build_state(self):
        """ The build_state function is called when the agent requests data from0.( the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline
        deadnum = 0
        # Set 'state' as a tuple of relevant data for the agent        
        states = inputs, waypoint, deadline #full state
        #deadnum = (deadline*10)/(self.env.trial_data['initial_deadline'])
        #if deadnum > 0:
        #    deadnum = 0
        reduced_state = (waypoint,
                        states[0]['light'],
                        ((states[0]['oncoming'] == 'forward') or (states[0]['oncoming'] == 'right')),
                        (states[0]['left'] == 'forward'),
                        (states[0]['right'] == 'forward'))
        #reduced_state2 = (states[0]['light'],
        #                ((states[0]['oncoming'] == 'forward') or (states[0] ['oncoming'] == 'right')),
        #                (states[0]['left'] == 'forward'),
        #                 (states[0]['right'] == 'forward'),
        #                 states[1],
        #                 deadnum)
        #ags = Agent(self)
        #print ags.get_state()
        state = reduced_state
        print state
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        # Calculate the maximum Q-value of all actions for a given state
        #num_state = self.statedict[state] #state tuple -> state number
        action_Q = self.Q[self.state] #{state,action:Q} dictionary-tuple -> {action:Q} dictionary
        maxQ = np.max(np.around(action_Q.values(),decimals=0))
        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """
       
        if self.state not in self.Q.keys():
            self.Q[self.state] = {ya:0.0 for ya in self.valid_actions}
        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        #self.state = state
        maxQ = self.get_maxQ(self.state)
        
        #num_state = self.statedict[state]
        action_Q = self.Q[self.state]
        Qvals = np.around(action_Q.values(), decimals=0)
        
        act_Q_ar = np.asarray(action_Q.keys())
        maxQ_action = act_Q_ar[np.where(Qvals == maxQ)]
        print maxQ_action
        self.next_waypoint = self.planner.next_waypoint()
        valid_actions_reduced = list(xa for xa in self.valid_actions)
        valid_actions_reduced.remove(self.next_waypoint)
        action_reduced = np.random.choice(np.asarray(valid_actions_reduced))
        print 'VALS',maxQ_action, action_Q
        if self.learning == True: 
            p = np.random.random_sample()
            if (p < self.epsilon):
                action = np.random.choice([self.next_waypoint, self.next_waypoint, self.next_waypoint,
                                           action_reduced])
                #action = self.next_waypoint
                print 'PPPPPPPP', p, action
            else:
                action = np.random.choice(maxQ_action)
                #if len(vals) == 1:
                #    action = action_Q[vals[0]]
                #    print 'PPPP', p, action
                #if len(vals) > 1:
                    #print 'QQQQ', self.valid_actions[vals[0]]
                    #print action_Q.keys()
                #    pr = np.random.random_integers(len(vals))
                #    for k in range(0,len(vals)):
                #        if k == pr: 
                #            action = action_Q.keys()[vals[pr]]
        elif self.learning == False:
            action = np.random.choice([self.next_waypoint, self.next_waypoint, action_reduced])
        #print 'QQ', self.valid_actions[vals[0]]
        #print action_Q.keys()[vals[0]]   
        #print len(vals)
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        # Otherwise, choose an action with the highest Q-value for the current state
        # Be sure that when choosing an action with highest Q-value that you randomly select between actions that "tie".
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """
        #num_state = self.statedict[state]
        Qprev = self.Q[self.state][action]
        self.Q[self.state][action] = (1-(1.0*self.alpha))*Qprev + (1.0*self.alpha)*reward
        #print 'QQQQQ', num_state, Qprev,self.Q[num_state][action], action
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose = True, grid_size = (6,4),num_dummies = 80)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, epsilon=1, alpha=0.3)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = False)

    ##############++
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env,update_delay = 0.0, log_metrics = True, display = False)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test = 10,tolerance = 0.05)


if __name__ == '__main__':
    run()
